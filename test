import pytest
from unittest.mock import Mock, patch
import json
from app.meeting_assist_graph.schemas.errors import MeetingAssistError
from app.meeting_assist_graph.types import AgentType
from app.meeting_assist_graph.schemas.structured.hallucination import WealthPlan_Hallucinations
from app.meeting_assist_graph.schemas.input import Updated_WealthPlanNotesAgentRequest
from app.meeting_assist_graph.state import WealthPlanState
from hallucination import wp_validate_hallucination_node


@pytest.fixture
def mock_state():
    state = Mock(spec=WealthPlanState)
    state.llm_plan_level_model_dump_json = lambda: json.dumps({"plan": "test_plan"})
    state.llm_goal_level_model_dump_json = lambda: json.dumps({"goal": "test_goal"})
    state.plan_level_insights_summaries = Mock(spec=Updated_WealthPlanNotesAgentRequest)
    state.goal_level_insights_summaries = Mock(spec=Updated_WealthPlanNotesAgentRequest)
    state.agent_type = AgentType.WEALTHPLAN_AGENT
    state.eci = "test_eci"
    state.package_id = "test_package"
    state.advisor_id = "test_advisor"
    return state

@pytest.fixture
def mock_wealth_plan_hallucinations():
    with patch('wp_Hallucination.WealthPlan_Hallucinations') as mock:
        mock_instance = Mock()
        mock_instance.model_dump_json = lambda: json.dumps({
            "validated_insights_summaries": [
                {"hallucination_flag": True, "content": "test1"},
                {"hallucination_flag": False, "content": "test2"}
            ]
        })
        mock.return_value = mock_instance
        yield mock

def test_successful_validation(mock_state, mock_wealth_plan_hallucinations):
    """Test successful validation of hallucinations"""
    with patch('wp_Hallucination.dump_to_file') as mock_dump, \
         patch('wp_Hallucination.write_logs_to_rds') as mock_write:
        
        result = wp_validate_hallucination_node(mock_state, "test_chain")
        
        assert result is True
        mock_dump.assert_called()
        mock_write.assert_called()

def test_missing_state_data(mock_state):
    """Test error handling when state data is missing"""
    mock_state.llm_plan_level_model_dump_json = lambda: None
    mock_state.llm_goal_level_model_dump_json = lambda: None
    
    with pytest.raises(MeetingAssistError) as exc_info:
        wp_validate_hallucination_node(mock_state, "test_chain")
    
    assert "No insights and summaries in state" in str(exc_info.value)

def test_missing_input_request(mock_state):
    """Test error handling when input request is missing"""
    mock_state.plan_level_insights_summaries = None
    
    with pytest.raises(MeetingAssistError) as exc_info:
        wp_validate_hallucination_node(mock_state, "test_chain")
    
    assert "No input request in state" in str(exc_info.value)

def test_llm_processing_error(mock_state, mock_wealth_plan_hallucinations):
    """Test error handling during LLM processing"""
    mock_wealth_plan_hallucinations.side_effect = Exception("LLM Error")
    
    with pytest.raises(MeetingAssistError) as exc_info:
        wp_validate_hallucination_node(mock_state, "test_chain")
    
    assert "Error calling the LLM for LRCC checks" in str(exc_info.value)

def test_file_operation_error(mock_state, mock_wealth_plan_hallucinations):
    """Test error handling during file operations"""
    with patch('wp_Hallucination.dump_to_file', side_effect=Exception("File Error")):
        with pytest.raises(MeetingAssistError) as exc_info:
            wp_validate_hallucination_node(mock_state, "test_chain")
        
        assert "Internal Error while retireving the LRCC Insights & Summaries" in str(exc_info.value)

def test_hallucination_separation(mock_state, mock_wealth_plan_hallucinations):
    """Test proper separation of hallucinated and non-hallucinated insights"""
    with patch('wp_Hallucination.dump_to_file') as mock_dump, \
         patch('wp_Hallucination.write_logs_to_rds') as mock_write:
        
        wp_validate_hallucination_node(mock_state, "test_chain")
        
        # Verify that dump_to_file was called with hallucinated insights
        mock_dump.assert_any_call(
            mock_wealth_plan_hallucinations.return_value,
            AgentType.WEALTHPLAN_AGENT,
            "test_eci_hallucinated_plan_level.json"
        )
        
        # Verify that write_logs_to_rds was called with hallucinated insights
        mock_write.assert_called_with(
            package_id="test_package",
            eci_id="test_eci",
            advisor_id="test_advisor",
            content_type="hallucinated_summaries",
            content=mock_wealth_plan_hallucinations.return_value.model_dump_json(),
            agent_type=str(AgentType.WEALTHPLAN_AGENT)
        ) 


